{"version":3,"sources":["imgs/head.jpg","Header.js","MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","MemeGenerator","state","topText","bottomText","randomImg","allMemeImgs","handleChange","event","target","name","value","setState","handleSubmit","preventDefault","randNum","Math","floor","random","length","randMemeImg","url","fetch","proxyUrl","then","response","json","memes","data","onSubmit","this","type","placeholder","onChange","src","alt","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kC,sGCY5BC,MATf,WACI,OACI,gCACK,wBAAIC,UAAU,OAAd,SACA,mCAAQ,6BAAR,gB,mCC0DEC,E,4MA7DHC,MAAQ,CACRC,QAAS,GACTC,WAAY,GACZC,UAAW,gCACXC,YAAa,I,EAcrBC,aAAe,SAAAC,GAAU,IAAD,EACEA,EAAMC,OAArBC,EADa,EACbA,KAAMC,EADO,EACPA,MACb,EAAKC,SAAL,eAAiBF,EAAOC,K,EAG5BE,aAAe,SAAAL,GACXA,EAAMM,iBACN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAW,EAAKhB,MAAMI,YAAYa,QAC5DC,EAAc,EAAKlB,MAAMI,YAAYS,GAASM,IACpD,EAAKT,SAAS,CAAEP,UAAWe,K,kEApBV,IAAD,OAGhBE,MAAMC,yEACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACRE,EAASF,EAASG,KAAlBD,MACP,EAAKf,SAAS,CAAEN,YAAaqB,S,+BAiBrC,OACI,6BACI,0BAAM3B,UAAU,YAAY6B,SAAUC,KAAKjB,cACvC,2BACIkB,KAAK,OACLrB,KAAK,UACLsB,YAAY,WACZrB,MAAOmB,KAAK5B,MAAMC,QAClB8B,SAAUH,KAAKvB,eAEnB,2BACIwB,KAAK,OACLrB,KAAK,aACLsB,YAAY,cACZrB,MAAOmB,KAAK5B,MAAME,WAClB6B,SAAUH,KAAKvB,eAGnB,wCAEJ,yBAAKP,UAAU,QACX,yBAAKkC,IAAKJ,KAAK5B,MAAMG,UAAW8B,IAAI,KACpC,wBAAInC,UAAU,OAAO8B,KAAK5B,MAAMC,SAChC,wBAAIH,UAAU,UAAU8B,KAAK5B,MAAME,kB,GAxD3BgC,a,MCgBbC,MAbf,WACE,OACC,yBAAKrC,UAAU,iBAChB,yBAAKA,UAAU,UACP,kBAAC,EAAD,OAEL,yBAAKA,UAAU,iBACd,kBAAC,EAAD,SCAcsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4258252b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/head.c4e271e2.jpg\";","import React from \"react\"\r\nimport img from './imgs/head.jpg'\r\n\r\nfunction Header() {\r\n    return (\r\n        <header>\r\n\t            <h1 className=\"tag\">{`<NB/>`}</h1>\r\n\t            <p>Meme <br /> Generator</p>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React, {Component} from \"react\"\r\n\r\nclass MemeGenerator extends Component {\r\n \r\n            state = {\r\n            topText: \"\",\r\n            bottomText: \"\",\r\n            randomImg: \"http://i.imgflip.com/1bij.jpg\",\r\n            allMemeImgs: []\r\n        }\r\n    \r\n    componentDidMount() {\r\n        const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n              targetUrl = \"https://api.imgflip.com/get_memes\"\r\n        fetch(proxyUrl + targetUrl)\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                const {memes} = response.data\r\n                this.setState({ allMemeImgs: memes })\r\n            })\r\n    }\r\n    \r\n    handleChange = event => {\r\n        const {name, value} = event.target\r\n        this.setState({ [name]: value })\r\n    }\r\n    \r\n    handleSubmit = event => {\r\n        event.preventDefault()\r\n        const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\r\n        const randMemeImg = this.state.allMemeImgs[randNum].url\r\n        this.setState({ randomImg: randMemeImg })\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <form className=\"meme-form\" onSubmit={this.handleSubmit}>\r\n                    <input \r\n                        type=\"text\"\r\n                        name=\"topText\"\r\n                        placeholder=\"Top Text\"\r\n                        value={this.state.topText}\r\n                        onChange={this.handleChange}\r\n                    /> \r\n                    <input \r\n                        type=\"text\"\r\n                        name=\"bottomText\"\r\n                        placeholder=\"Bottom Text\"\r\n                        value={this.state.bottomText}\r\n                        onChange={this.handleChange}\r\n                    /> \r\n                \r\n                    <button>Gen</button>\r\n                </form>\r\n                <div className=\"meme\">\r\n                    <img src={this.state.randomImg} alt=\"\" />\r\n                    <h2 className=\"top\">{this.state.topText}</h2>\r\n                    <h2 className=\"bottom\">{this.state.bottomText}</h2>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MemeGenerator\r\n\r\n// fetch('http://catfacts-api.appspot.com/api/facts?number=99', { mode: 'no-cors'})\r\n//   .then(blob => blob.json())\r\n//   .then(data => {\r\n//     console.table(data);\r\n//     return data;\r\n//   })\r\n//   .catch(e => {\r\n//     console.log(e);\r\n//     return e;\r\n//   });\r\n\r\n//   var proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n//     targetUrl = 'http://catfacts-api.appspot.com/api/facts?number=99'\r\n// fetch(proxyUrl + targetUrl)\r\n//   .then(blob => blob.json())\r\n//   .then(data => {\r\n//     console.table(data);\r\n//     document.querySelector(\"pre\").innerHTML = JSON.stringify(data, null, 2);\r\n//     return data;\r\n//   })\r\n//   .catch(e => {\r\n//     console.log(e);\r\n//     return e;\r\n//   });","import React from 'react';\nimport Header from './Header'\nimport MemeGenerator from './MemeGenerator'\nimport './style.css'\n\nfunction App() {\n  return (\n  \t<div className='mainContainer'>\n\t\t<div className='header'>\n          <Header />\n        </div>\n\t    <div className='memeContainer'>\n\t     <MemeGenerator />\n        </div>\n    </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}